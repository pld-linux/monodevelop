diff -Nuard monodevelop-0.5.orig/configure.in monodevelop-0.5/configure.in
--- monodevelop-0.5.orig/configure.in	2004-06-29 21:18:46.000000000 +0200
+++ monodevelop-0.5/configure.in	2004-07-04 10:58:07.051839656 +0200
@@ -12,9 +12,14 @@
 AC_PATH_PROG(MONO, mono)
 AC_PATH_PROG(MCS, mcs)
 AC_PATH_PROG(XDGMIME, update-mime-database, no)
+
 if test "x$MONO" = "x" ; then
-  AC_MSG_ERROR([Can't find "mono" in your PATH])
+  AC_PATH_PROG(MINT, mint)
+  if test "x$MINT" = "x" ; then
+	AC_MSG_ERROR([Can't find "mono" or "mint" in your PATH])
+  fi
 fi
+
 if test "x$MCS" = "x" ; then
   AC_MSG_ERROR([Can't find "mcs" in your PATH])
 fi
@@ -28,13 +33,38 @@
 fi
 
 dnl unmanaged hard dependencies
-MONO_REQUIRED_VERSION=1.0
 GNOMEVFS_REQUIRED_VERSION=2.0
 PKG_CHECK_MODULES(UNMANAGED_DEPENDENCIES,
-mono >= $MONO_REQUIRED_VERSION
 gnome-vfs-2.0 >= $GNOMEVFS_REQUIRED_VERSION
 )
 
+MONO_REQUIRED_VERSION=1.0
+PKG_CHECK_MODULES(UNMANAGED_DEPENDENCIES_MONO,mono >= $MONO_REQUIRED_VERSION, has_mono=true, has_mono=false)
+PKG_CHECK_MODULES(UNMANAGED_DEPENDENCIES_MINT,mint >= $MONO_REQUIRED_VERSION, has_mint=true, has_mint=false)
+
+if test "x$has_mono" = "xtrue"; then
+    if test `uname -s` = "Darwin"; then
+	AC_PATH_PROG(RUNTIME, mono, no)
+	AC_PATH_PROG(CSC, mcs, no)
+	LIB_PREFIX=
+	LIB_SUFFIX=.dylib
+    else
+	AC_PATH_PROG(RUNTIME, mono, no)
+	AC_PATH_PROG(CSC, mcs, no)
+	RUNTIME="$RUNTIME --debug"
+	LIB_PREFIX=.so
+	LIB_SUFFIX=
+    fi
+else
+    if test "x$has_mint" = "xtrue"; then
+	AC_PATH_PROG(RUNTIME, mint, no)
+	AC_PATH_PROG(CSC, mcs, no)
+	LIB_PREFIX=.so
+	LIB_SUFFIX=
+    fi
+fi
+
+
 dnl hard dependencies
 GTKSHARP_REQUIRED_VERSION=1.0
 GTKSOURCEVIEWSHARP_REQUIRED_VERSION=0.5
@@ -165,6 +195,8 @@
 po/Makefile.in
 src/AddIns/prj2make-sharp-lib/Makefile
 src/AddIns/prj2make-sharp-lib/AssemblyInfo.cs
+src/AddIns/BackendBindings/NemerleBinding/NemerleBindingExecutionServices.cs
+src/AddIns/BackendBindings/CSharpBinding/CSharpBindingExecutionManager.cs
 ])
 
 echo "---"
diff -Nuard monodevelop-0.5.orig/Makefile.am monodevelop-0.5/Makefile.am
--- monodevelop-0.5.orig/Makefile.am	2004-06-27 06:04:20.000000000 +0200
+++ monodevelop-0.5/Makefile.am	2004-07-04 10:17:22.675441352 +0200
@@ -43,7 +43,7 @@
 run: runmd
 
 runmd: $(PROGRAM)
-	cd build/bin && LD_LIBRARY_PATH=`echo "$(LD_LIBRARY_PATH):$(MOZILLA_HOME)" | sed 's/^://g'` mono --debug MonoDevelop.exe
+	cd build/bin && LD_LIBRARY_PATH=`echo "$(LD_LIBRARY_PATH):$(MOZILLA_HOME)" | sed 's/^://g'` $(RUNTIME) MonoDevelop.exe
 
 pad: $(MONOPAD)
 
diff -Nuard monodevelop-0.5.orig/monodevelop.in monodevelop-0.5/monodevelop.in
--- monodevelop-0.5.orig/monodevelop.in	2004-06-27 06:03:48.000000000 +0200
+++ monodevelop-0.5/monodevelop.in	2004-07-04 10:13:21.858051160 +0200
@@ -50,19 +50,19 @@
 
 case x$1 in
     x--profile)
-    mono --profile ./MonoDevelop.exe $@
+    @RUNTIME@ --profile ./MonoDevelop.exe $@
 	exit 0
     ;;
     x--debug)
-    mono --debug ./MonoDevelop.exe $@
+    @RUNTIME@ --debug ./MonoDevelop.exe $@
 	exit 0
     ;;
 	x--trace)
-    mono --trace ./MonoDevelop.exe $@
+    @RUNTIME@ --trace ./MonoDevelop.exe $@
 	exit 0;
 	;;
 esac
 
 # should not use --debug when we are more stable
-mono --debug ./MonoDevelop.exe $@
+@RUNTIME@ ./MonoDevelop.exe $@
 
diff -Nuard monodevelop-0.5.orig/src/AddIns/BackendBindings/CSharpBinding/CSharpBindingExecutionManager.cs monodevelop-0.5/src/AddIns/BackendBindings/CSharpBinding/CSharpBindingExecutionManager.cs
--- monodevelop-0.5.orig/src/AddIns/BackendBindings/CSharpBinding/CSharpBindingExecutionManager.cs	2004-06-27 06:02:55.000000000 +0200
+++ monodevelop-0.5/src/AddIns/BackendBindings/CSharpBinding/CSharpBindingExecutionManager.cs	1970-01-01 01:00:00.000000000 +0100
@@ -1,106 +0,0 @@
-// <file>
-//     <copyright see="prj:///doc/copyright.txt"/>
-//     <license see="prj:///doc/license.txt"/>
-//     <owner name="Mike Krüger" email="mike@icsharpcode.net"/>
-//     <version value="$version"/>
-// </file>
-
-using System;
-using System.IO;
-using System.Diagnostics;
-using System.Collections;
-using System.Reflection;
-using System.Resources;
-using System.Xml;
-using System.CodeDom.Compiler;
-using System.Threading;
-
-using MonoDevelop.Internal.Project;
-using MonoDevelop.Gui;
-using MonoDevelop.Core.Services;
-using MonoDevelop.Services;
-
-namespace CSharpBinding
-{
-	/// <summary>
-	/// This class describes the main functionalaty of a language codon
-	/// </summary>
-	public class CSharpBindingExecutionManager
-	{
-		public void Debug (IProject project)
-		{
-			FileUtilityService fileUtilityService = (FileUtilityService) ServiceManager.GetService (typeof (FileUtilityService));
-			string directory = fileUtilityService.GetDirectoryNameWithSeparator(((CSharpCompilerParameters)project.ActiveConfiguration).OutputDirectory);
-			string exe = ((CSharpCompilerParameters)project.ActiveConfiguration).OutputAssembly + ".exe";
-
-			IDebuggingService dbgr = (IDebuggingService) ServiceManager.GetService (typeof (IDebuggingService));
-			if (dbgr != null)
-				dbgr.Run (new string[] { Path.Combine (directory, exe) } );
-		}
-
-		public void Execute(string filename)
-		{
-			string exe = Path.ChangeExtension(filename, ".exe");
-			ProcessStartInfo psi = new ProcessStartInfo("mono", "--debug " + exe);
-			psi.WorkingDirectory = Path.GetDirectoryName(exe);
-			psi.UseShellExecute = false;
-			try {
-				Process p = new Process();
-				p.StartInfo = psi;
-				p.Start();
-			} catch (Exception) {
-				throw new ApplicationException("Can not execute " + "\"" + exe + "\"\n(Try restarting MonoDevelop or start your app manually)");
-			}
-		}
-		
-		public void Execute(IProject project)
-		{
-			CSharpCompilerParameters parameters = (CSharpCompilerParameters)project.ActiveConfiguration;
-			FileUtilityService fileUtilityService = (FileUtilityService)ServiceManager.GetService(typeof(FileUtilityService));
-			
-			string directory = fileUtilityService.GetDirectoryNameWithSeparator(((CSharpCompilerParameters)project.ActiveConfiguration).OutputDirectory);
-			string exe = ((CSharpCompilerParameters)project.ActiveConfiguration).OutputAssembly + ".exe";
-			string args = ((CSharpCompilerParameters)project.ActiveConfiguration).CommandLineParameters;
-			
-			ProcessStartInfo psi;
-			if (parameters.ExecuteScript != null && parameters.ExecuteScript.Length > 0) {
-				//Console.WriteLine("EXECUTE SCRIPT!!!!!!");
-				psi = new ProcessStartInfo("\"" + parameters.ExecuteScript + "\"");
-				psi.UseShellExecute = false;
-			} else {
-				string runtimeStarter = "mono --debug ";
-				
-				switch (parameters.NetRuntime) {
-					case NetRuntime.Mono:
-						runtimeStarter = "mono --debug ";
-						break;
-					case NetRuntime.MonoInterpreter:
-						runtimeStarter = "mint ";
-						break;
-				}
-				
-				//if (parameters.CompileTarget != CompileTarget.WinExe && parameters.PauseConsoleOutput) {
-					psi = new ProcessStartInfo("xterm",
-						string.Format (
-						@"-e ""{0} '{1}{2}' {3} ; echo; read -p 'press any key to continue...' -n1""",
-						runtimeStarter, directory, exe, args));
-					psi.UseShellExecute = false;
-				//} else {
-				//	psi = new ProcessStartInfo(runtimeStarter, "\"" + directory + exe + "\" " + args);
-				//	psi.UseShellExecute = false;
-				//}
-			}
-			
-			try {
-				psi.WorkingDirectory = Path.GetDirectoryName(directory);
-				psi.UseShellExecute  =  false;
-				
-				Process p = new Process();
-				p.StartInfo = psi;
-				p.Start();
-			} catch (Exception) {
-				throw new ApplicationException("Can not execute " + "\"" + directory + exe + "\"\n(Try restarting MonoDevelop or start your app manually)");
-			}
-		}
-	}
-}
diff -Nuard monodevelop-0.5.orig/src/AddIns/BackendBindings/CSharpBinding/CSharpBindingExecutionManager.cs.in monodevelop-0.5/src/AddIns/BackendBindings/CSharpBinding/CSharpBindingExecutionManager.cs.in
--- monodevelop-0.5.orig/src/AddIns/BackendBindings/CSharpBinding/CSharpBindingExecutionManager.cs.in	1970-01-01 01:00:00.000000000 +0100
+++ monodevelop-0.5/src/AddIns/BackendBindings/CSharpBinding/CSharpBindingExecutionManager.cs.in	2004-07-04 10:48:17.906403376 +0200
@@ -0,0 +1,107 @@
+// <file>
+//     <copyright see="prj:///doc/copyright.txt"/>
+//     <license see="prj:///doc/license.txt"/>
+//     <owner name="Mike Krüger" email="mike@icsharpcode.net"/>
+//     <version value="$version"/>
+// </file>
+
+using System;
+using System.IO;
+using System.Diagnostics;
+using System.Collections;
+using System.Reflection;
+using System.Resources;
+using System.Xml;
+using System.CodeDom.Compiler;
+using System.Threading;
+
+using MonoDevelop.Internal.Project;
+using MonoDevelop.Gui;
+using MonoDevelop.Core.Services;
+using MonoDevelop.Services;
+
+namespace CSharpBinding
+{
+	/// <summary>
+	/// This class describes the main functionalaty of a language codon
+	/// </summary>
+	public class CSharpBindingExecutionManager
+	{
+		public void Debug (IProject project)
+		{
+			FileUtilityService fileUtilityService = (FileUtilityService) ServiceManager.GetService (typeof (FileUtilityService));
+			string directory = fileUtilityService.GetDirectoryNameWithSeparator(((CSharpCompilerParameters)project.ActiveConfiguration).OutputDirectory);
+			string exe = ((CSharpCompilerParameters)project.ActiveConfiguration).OutputAssembly + ".exe";
+
+			IDebuggingService dbgr = (IDebuggingService) ServiceManager.GetService (typeof (IDebuggingService));
+			if (dbgr != null)
+				dbgr.Run (new string[] { Path.Combine (directory, exe) } );
+		}
+
+		public void Execute(string filename)
+		{
+			string exe = Path.ChangeExtension(filename, ".exe");
+			
+			ProcessStartInfo psi = new ProcessStartInfo("@RUNTIME@ " + exe);
+			psi.WorkingDirectory = Path.GetDirectoryName(exe);
+			psi.UseShellExecute = false;
+			try {
+				Process p = new Process();
+				p.StartInfo = psi;
+				p.Start();
+			} catch (Exception) {
+				throw new ApplicationException("Can not execute " + "\"" + exe + "\"\n(Try restarting MonoDevelop or start your app manually)");
+			}
+		}
+		
+		public void Execute(IProject project)
+		{
+			CSharpCompilerParameters parameters = (CSharpCompilerParameters)project.ActiveConfiguration;
+			FileUtilityService fileUtilityService = (FileUtilityService)ServiceManager.GetService(typeof(FileUtilityService));
+			
+			string directory = fileUtilityService.GetDirectoryNameWithSeparator(((CSharpCompilerParameters)project.ActiveConfiguration).OutputDirectory);
+			string exe = ((CSharpCompilerParameters)project.ActiveConfiguration).OutputAssembly + ".exe";
+			string args = ((CSharpCompilerParameters)project.ActiveConfiguration).CommandLineParameters;
+			
+			ProcessStartInfo psi;
+			if (parameters.ExecuteScript != null && parameters.ExecuteScript.Length > 0) {
+				//Console.WriteLine("EXECUTE SCRIPT!!!!!!");
+				psi = new ProcessStartInfo("\"" + parameters.ExecuteScript + "\"");
+				psi.UseShellExecute = false;
+			} else {
+				string runtimeStarter = "mono --debug ";
+				
+				switch (parameters.NetRuntime) {
+					case NetRuntime.Mono:
+						runtimeStarter = "mono --debug ";
+						break;
+					case NetRuntime.MonoInterpreter:
+						runtimeStarter = "mint ";
+						break;
+				}
+				
+				//if (parameters.CompileTarget != CompileTarget.WinExe && parameters.PauseConsoleOutput) {
+					psi = new ProcessStartInfo("xterm",
+						string.Format (
+						@"-e ""{0} '{1}{2}' {3} ; echo; read -p 'press any key to continue...' -n1""",
+						runtimeStarter, directory, exe, args));
+					psi.UseShellExecute = false;
+				//} else {
+				//	psi = new ProcessStartInfo(runtimeStarter, "\"" + directory + exe + "\" " + args);
+				//	psi.UseShellExecute = false;
+				//}
+			}
+			
+			try {
+				psi.WorkingDirectory = Path.GetDirectoryName(directory);
+				psi.UseShellExecute  =  false;
+				
+				Process p = new Process();
+				p.StartInfo = psi;
+				p.Start();
+			} catch (Exception) {
+				throw new ApplicationException("Can not execute " + "\"" + directory + exe + "\"\n(Try restarting MonoDevelop or start your app manually)");
+			}
+		}
+	}
+}
diff -Nuard monodevelop-0.5.orig/src/AddIns/BackendBindings/NemerleBinding/NemerleBindingExecutionServices.cs monodevelop-0.5/src/AddIns/BackendBindings/NemerleBinding/NemerleBindingExecutionServices.cs
--- monodevelop-0.5.orig/src/AddIns/BackendBindings/NemerleBinding/NemerleBindingExecutionServices.cs	2004-06-27 06:02:53.000000000 +0200
+++ monodevelop-0.5/src/AddIns/BackendBindings/NemerleBinding/NemerleBindingExecutionServices.cs	1970-01-01 01:00:00.000000000 +0100
@@ -1,59 +0,0 @@
-using System;
-using System.IO;
-using System.Diagnostics;
-using System.Collections;
-using System.Reflection;
-using System.Resources;
-using System.Xml;
-using System.CodeDom.Compiler;
-using System.Threading;
-
-using MonoDevelop.Internal.Project;
-using MonoDevelop.Gui;
-using MonoDevelop.Core.Services;
-
-namespace NemerleBinding
-{
-	public class NemerleBindingExecutionServices
-	{	
-		
-		public void Execute(string filename)
-		{
-			throw new ApplicationException("No ExecuteFile");
-		}
-		
-		public void Execute(IProject project)
-		{
-			
-			NemerleParameters p = (NemerleParameters)project.ActiveConfiguration;
-			FileUtilityService fus = (FileUtilityService)ServiceManager.GetService(typeof(FileUtilityService));
-			string exe;
-			
-			if (p.ExecuteScript == String.Empty)
-			{
-				exe	= "mono --debug";
-			} else
-			{
-				exe = p.ExecuteScript;
-			}
-			
-			exe += " " + p.OutputAssembly + ".exe " + p.Parameters;
-			
-			try {
-				ProcessStartInfo psi = new ProcessStartInfo("xterm",
-					string.Format (
-					@"-e ""{0} ;echo;read -p 'press any key to continue...' -n1""",
-					exe));
-				psi.WorkingDirectory = fus.GetDirectoryNameWithSeparator(p.OutputDirectory);
-				psi.UseShellExecute = false;
-				
-				Process pr = new Process();
-				pr.StartInfo = psi;
-				pr.Start();
-			} catch (Exception) {
-				throw new ApplicationException("Can not execute");
-			}
-		}
-				
-	}
-}
diff -Nuard monodevelop-0.5.orig/src/AddIns/BackendBindings/NemerleBinding/NemerleBindingExecutionServices.cs.in monodevelop-0.5/src/AddIns/BackendBindings/NemerleBinding/NemerleBindingExecutionServices.cs.in
--- monodevelop-0.5.orig/src/AddIns/BackendBindings/NemerleBinding/NemerleBindingExecutionServices.cs.in	1970-01-01 01:00:00.000000000 +0100
+++ monodevelop-0.5/src/AddIns/BackendBindings/NemerleBinding/NemerleBindingExecutionServices.cs.in	2004-07-04 10:48:14.086984016 +0200
@@ -0,0 +1,59 @@
+using System;
+using System.IO;
+using System.Diagnostics;
+using System.Collections;
+using System.Reflection;
+using System.Resources;
+using System.Xml;
+using System.CodeDom.Compiler;
+using System.Threading;
+
+using MonoDevelop.Internal.Project;
+using MonoDevelop.Gui;
+using MonoDevelop.Core.Services;
+
+namespace NemerleBinding
+{
+	public class NemerleBindingExecutionServices
+	{	
+		
+		public void Execute(string filename)
+		{
+			throw new ApplicationException("No ExecuteFile");
+		}
+		
+		public void Execute(IProject project)
+		{
+			
+			NemerleParameters p = (NemerleParameters)project.ActiveConfiguration;
+			FileUtilityService fus = (FileUtilityService)ServiceManager.GetService(typeof(FileUtilityService));
+			string exe;
+			
+			if (p.ExecuteScript == String.Empty)
+			{
+				exe	= "@RUNTIME@ ";
+			} else
+			{
+				exe = p.ExecuteScript;
+			}
+			
+			exe += " " + p.OutputAssembly + ".exe " + p.Parameters;
+			
+			try {
+				ProcessStartInfo psi = new ProcessStartInfo("xterm",
+					string.Format (
+					@"-e ""{0} ;echo;read -p 'press any key to continue...' -n1""",
+					exe));
+				psi.WorkingDirectory = fus.GetDirectoryNameWithSeparator(p.OutputDirectory);
+				psi.UseShellExecute = false;
+				
+				Process pr = new Process();
+				pr.StartInfo = psi;
+				pr.Start();
+			} catch (Exception) {
+				throw new ApplicationException("Can not execute");
+			}
+		}
+				
+	}
+}
diff -Nuard monodevelop-0.5.orig/src/Libraries/SharpRefactory/Makefile.am monodevelop-0.5/src/Libraries/SharpRefactory/Makefile.am
--- monodevelop-0.5.orig/src/Libraries/SharpRefactory/Makefile.am	2004-06-27 06:03:38.000000000 +0200
+++ monodevelop-0.5/src/Libraries/SharpRefactory/Makefile.am	2004-07-04 10:17:38.544028960 +0200
@@ -125,7 +125,7 @@
 	@ $(CSC) /out:$@ /r:$(DLL) src/Main.cs
 
 run : test-parser.exe
-	@ MONO_PATH=`dirname $(DLL)` mono --debug test-parser.exe $(TEST_SOURCE)
+	@ MONO_PATH=`dirname $(DLL)` $(RUNTIME) test-parser.exe $(TEST_SOURCE)
 
 assemblydir = $(libdir)/monodevelop/bin
 assembly_DATA = $(DLL)
